@inherits RazorEngine.Templating.TemplateBase<Yaaf.AdvancedBuilding.Razor_TemplateModel>
<?xml version="1.0" encoding="utf-8" ?>
<Project Toolsversion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <SchemaVersion>2.0</SchemaVersion>
        <ProjectGuid>@Model.ProjectGuid</ProjectGuid>
        <OutputType>Library</OutputType>
        <RootNamespace>@Model.ProjectName</RootNamespace>
        <AssemblyName>@Model.ProjectName</AssemblyName>
        <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
        <TargetFsharpCoreVersion>4.3.1.0</TargetFsharpCoreVersion>
        <Name>@Model.ProjectName</Name>
        <TargetFrameworkProfile />
        <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\..\</SolutionDir>
        <RestorePackages>true</RestorePackages>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <Optimize>false</Optimize>
        <Tailcalls>false</Tailcalls>
        <OutputPath>bin</OutputPath>
        <DefineConstants>@(string.Join(";", Model.DefineConstants));TRACE;DEBUG</DefineConstants>
        <WarningLevel>3</WarningLevel>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
        <DebugType>pdbonly</DebugType>
        <Optimize>true</Optimize>
        <Tailcalls>true</Tailcalls>
        <OutputPath>bin</OutputPath>
        <DefineConstants>@(string.Join(";", Model.DefineConstants));TRACE</DefineConstants>
        <WarningLevel>3</WarningLevel>
    </PropertyGroup>
    <PropertyGroup>
        <DocumentationFile>$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
    </PropertyGroup>
    <PropertyGroup>
        <MinimumVisualStudioVersion Condition="'$(MinimumVisualStudioVersion)' == ''">11</MinimumVisualStudioVersion>
    </PropertyGroup>
    <Choose>
        <When Condition="'$(VisualStudioVersion)' == '11.0'">
            <PropertyGroup Condition="Exists('$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets')">
                <FSharpTargetsPath>$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets</FSharpTargetsPath>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\FSharp\Microsoft.FSharp.Targets')">
                <FSharpTargetsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\FSharp\Microsoft.FSharp.Targets</FSharpTargetsPath>
            </PropertyGroup>
        </Otherwise>
    </Choose>
    <Import Project="$(FSharpTargetsPath)" Condition="Exists('$(FSharpTargetsPath)')" />
    <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
         Other similar extension points exist, see Microsoft.Common.targets.
    <Target Name="BeforeBuild">
    </Target>
    <Target Name="AfterBuild">
    </Target>
    -->
    <Import Project="..\..\..\.paket\paket.targets" />
    <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
    <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
        <PropertyGroup>
            <ErrorText>Dieses Projekt verweist auf mindestens ein NuGet-Paket, das auf diesem Computer fehlt. Aktivieren Sie die Wiederherstellung von NuGet-Paketen, um die fehlende Datei herunterzuladen. Weitere Informationen finden Sie unter "http://go.microsoft.com/fwlink/?LinkID=322105". Die fehlende Datei ist "{0}".</ErrorText>
        </PropertyGroup>
        <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
    </Target>
    <ItemGroup>
        @foreach (var includeItem in Model.Includes)
        {
            if (includeItem.IsCompile)
            {
                <Compile Include="@includeItem.Include" />
            }
            else if (includeItem.IsCompileLink)
            {
                <Compile Include="@includeItem.Include">
                    <Link>@includeItem.LinkName</Link>
                </Compile>
            }
            else if (includeItem.IsContent)
            {
                <Content Include="@includeItem.Include" />
            }
            else if (includeItem.IsContentLink)
            {
                <Content Include="@includeItem.Include">
                    <Link />@includeItem.LinkName</Link>
                </Content>
            }
            else if (includeItem.IsNoneItem)
            {
                <None Include="@includeItem.Include" />
            }
            else if (includeItem.IsNoneItemLink)
            {
                <None Include="@includeItem.Include">
                    <Link />@includeItem.LinkName</Link>
                </None>
            }
            else if (includeItem.IsReference)
            {
                <Reference Include="@includeItem.ReferenceItem.Include">
                    <Private Condition=" '$(OS)' == 'Unix' ">@(includeItem.ReferenceItem.IsPrivate ? "Always" : "Never")</Private>
                    <Private Condition=" '$(OS)' != 'Unix' ">@(includeItem.ReferenceItem.IsPrivate ? "true" : "false")</Private>
                </Reference>
            }
            else if (includeItem.IsProjectReference)
            {
                <ProjectReference Include="@includeItem.ProjectReferenceItem.Include">
                    <Name>@includeItem.ProjectReferenceItem.Name</Name>
                    <Project>@includeItem.ProjectReferenceItem.ProjectGuid.ToString("B")</Project>
                    <Private Condition=" '$(OS)' == 'Unix' ">@(includeItem.ProjectReferenceItem.IsPrivate ? "Always" : "Never")</Private>
                    <Private Condition=" '$(OS)' != 'Unix' ">@(includeItem.ProjectReferenceItem.IsPrivate ? "true" : "false")</Private>
                </ProjectReference>
            }
            else
            {
                throw new InvalidOperationException("the given item is unknown: " + includeItem.ToString());
            }
        }
    </ItemGroup>
</Project>